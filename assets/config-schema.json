{
  "type": "object",
  "properties": {
    "port": {
      "type": "integer",
      "minimum": 1,
      "maximum": 65535,
      "description": "The port the server is listening on."
    },
    "hostname": {
      "type": "string",
      "description": "The hostname the server is listening on. Does not include the port."
    },
    "unix_socket": {
      "type": "string",
      "description": "If set, the HTTP server will listen on a unix socket instead of a port."
    },
    "respect_system_proxy": {
      "type": "boolean",
      "default": true,
      "description": "[DEPRECATED] Bun always respect system proxy in env vars. We don't have a way to disable it.\nRespect https_proxy, HTTPS_PROXY and use them for requests by default"
    },
    "override_model_owned_by": {
      "type": "string",
      "description": "Override \"owned_by\" in model list response"
    },
    "dump_request_logs": {
      "type": "boolean",
      "default": false,
      "description": "Write request payload and response into log files"
    },
    "max_request_body_size": {
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "type": "string",
          "pattern": "\\d+(?:\\.\\d+)?(?:[kmgtKMGT][iI]?[bB]?)"
        }
      ],
      "default": "128MiB",
      "description": "a size string (example: 12m, 128mib) or a int (default unit: bytes)"
    },
    "storage": {
      "type": "object",
      "properties": {
        "baseDir": {
          "type": "string",
          "default": "./storage"
        }
      },
      "required": [
        "baseDir"
      ]
    },
    "upstreams": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "default_api_key": {
            "type": "string"
          },
          "override_api_key": {
            "type": "string"
          },
          "proxy": {
            "type": "string"
          },
          "fallback": {
            "type": "boolean",
            "description": "If enable this flag, the server will forward all unknown request to this upstream"
          },
          "type": {
            "type": "string",
            "enum": [
              "v1",
              "anthropic",
              "google",
              "ollama",
              "openai"
            ],
            "default": "v1",
            "description": "AI upstream compatible type ('v1' represents this AI provider is compatibility with OpenAI v1 REST APIs. This is the default value)"
          },
          "only_public_models": {
            "type": "boolean",
            "description": "List models without providing API keys"
          },
          "api_version": {
            "type": "string",
            "description": "For example: '2023-06-01' for Anthropic upstream"
          },
          "default_headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional headers for requests to this upstream. they might be overwritten by the client"
          }
        },
        "required": [
          "name",
          "endpoint"
        ]
      }
    },
    "plugins": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "use": {
            "anyOf": [
              {
                "const": "debug-request-messages"
              },
              {
                "const": "disable-models"
              },
              {
                "const": "keep-only-last-message"
              },
              {
                "const": "remove-telemetry-headers"
              },
              {
                "const": "replace-messages"
              },
              {
                "const": "rewrite-model-id"
              },
              {
                "type": "string",
                "description": "The name of the plugin or the path to the main file of the plugin"
              }
            ]
          },
          "configs": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "use"
        ],
        "if": {
          "properties": {
            "use": {
              "const": "disable-models"
            }
          }
        },
        "then": {
          "properties": {
            "configs": {
              "type": "object",
              "properties": {
                "patterns": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "a regualr expression for matching model name"
                  }
                },
                "status_code": {
                  "type": "integer",
                  "default": 404
                }
              }
            }
          }
        },
        "else": {
          "if": {
            "properties": {
              "use": {
                "const": "keep-only-last-message"
              }
            }
          },
          "then": {
            "properties": {
              "configs": {
                "type": "object",
                "properties": {
                  "flag": {
                    "type": "string",
                    "description": "default: /only_last"
                  }
                }
              }
            }
          },
          "else": {
            "if": {
              "properties": {
                "use": {
                  "const": "replace-messages"
                }
              }
            },
            "then": {
              "properties": {
                "configs": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "model_regexp": {
                            "type": "string"
                          },
                          "search": {
                            "type": "string"
                          },
                          "replace": {
                            "type": "string"
                          },
                          "regex": {
                            "type": "string",
                            "pattern": "^[gimsu]+$",
                            "description": "the flags of regular expression. default: gi"
                          }
                        },
                        "required": [
                          "search",
                          "replace"
                        ]
                      }
                    }
                  },
                  "required": [
                    "rules"
                  ]
                }
              }
            },
            "else": {
              "if": {
                "properties": {
                  "use": {
                    "const": "rewrite-model-id"
                  }
                }
              },
              "then": {
                "properties": {
                  "configs": {
                    "type": "object",
                    "properties": {
                      "rules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "match": {
                              "type": "string",
                              "description": "a regular expression for matching the model name (full match)"
                            },
                            "replace": {
                              "type": "string",
                              "description": "replaced model name, you can use $1, $2, $3, ... to represent captured groups"
                            }
                          },
                          "required": [
                            "match",
                            "replace"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "else": {}
            }
          }
        }
      }
    }
  },
  "required": [
    "upstreams"
  ]
}